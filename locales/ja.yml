flags:
  apt: "Ubuntuリポジトリからパッケージをインストールしてください。"
  aur: "AUR（Arch User Repository）からパッケージをインストールしてください。"
  dnf: "FedoraのDNF（Dandified YUM) からパッケージをインストールしてください。"
  apk: "Alpineリポジトリからパッケージをインストールします。"
  zypper: "OpenSUSEリポジトリからパッケージをインストールします。"
  xbps: "Void (Linux)リポジトリからパッケージをインストールします。"
  nix: "Nixpkgs (Nix packages)リポジトリからパッケージをインストールします。"
  swupd: "「Clear Linux*」ストアからパッケージをインストールします"
  name: " こう言うカスタムコンテナに適用します"
apx:
  use: "apx"
  long: "Apxは、複数のソースをサポートするパッケージマネージャで、\n管理されたコンテナにパッケージをインストールすることができます。"
  short: "Apxは、複数のソースをサポートするパッケージマネージャで、\n管理されたコンテナにパッケージをインストールすることができます。"
  verboseFlag: "より詳細な出力を表示します"
  allFlag: "すべてのコンテナに適用します。"
  cxl: "ユーザーのリクエストにより操作がキャンセルされました。"
  assumeYes: "手動での確認なしで進行します。"
  notForNix: "このコマンドは、Nix環境には適用されません。"
autoremove:
  use: "autoremove"
  long: "すべての未使用パッケージを自動的に削除します"
  short: "すべての未使用パッケージを自動的に削除します"
clean:
  use: "clean"
  long: "Apxパッケージマネージャのキャッシュを空にします。"
  short: "Apxパッケージマネージャのキャッシュを空にします。"
enter:
  use: "enter"
  long: "管理されたコンテナ内でシェルを起動します。"
  short: "管理されたコンテナ内でシェルを起動します。"
  failedEnter: "管理されたコンテナに入ることに失敗しました。"
  outside: "現在、管理されたコンテナの外にいます。"
export:
  use: "export <program/binary>"
  long: "管理されたコンテナからプログラムのデスクトップエントリをエクスポート/再作成します。"
  short: "管理されたコンテナからプログラムのデスクトップエントリをエクスポート/再作成します。"
  binFlag: "バイナリコマンドをエクスポートします"
init:
  use: "init"
  long: "管理されたコンテナを初期化します。"
  short: "管理されたコンテナを初期化します。"
  confirm: "コンテナは既に存在しています。再初期化しますか？この操作は、コンテナ内のあなたのファイルを含め、すべてを削除します。"
  remove: "コンテナの削除中にエラーが発生しました: %v"
  create: "コンテナの作成中にエラーが発生しました: %v"
install:
  use: "apx install <パッケージ>"
  long: "管理されたコンテナ内にパッケージをインストールします。"
  short: "管理されたコンテナ内にパッケージをインストールします。"
  assumeYes: "手動で確認せずに続行します。"
  fixBroken: "インストール前に壊れた依存関係を修正します"
  noExport: "インストール後にデスクトップエントリをエクスポートしないでください。"
  sideload: "ローカルファイルからパッケージをインストールします。"
  sideArgs: "パッケージファイルからのインストールには、ローカルファイルへのパスが必要です。"
  sideUserTemp: "ファイルをユーザーの一時フォルダに移動できませんでした: %s"
  exportBinPrompt: "バイナリ %s をホストにエクスポートしますか？\nこれにより、「apx run」を使用せずに直接シェルから呼び出すことができます。\n
    後で「apx export --bin %s」を使用してエクスポートすることもできます。"
list:
  use: "list"
  long: "インストールされているパッケージをリストアップします。"
  short: "インストールされているパッケージをリストアップします。"
  upgradable: "アップグレード可能なパッケージを表示します。"
  installed: "インストールされているパッケージを表示します。"
nix:
  use: "nix"
  long: "$HOME ディレクトリにカスタムインストールした Nix を管理します。\n\napx nix 統合は、デフォルトの Nix プロファイルのラッパーとして機能します。\n
    インストール後、apx nix コマンドを使用せずに Nix の任意の機能を自由に使用できます。"
  short: "Nix のインストールを管理します。"
nixinit:
  use: "init"
  long: "$HOME/.nix を作成し、それを /nix としてマウントするためのいくつかの SystemD ユニットを設定することで、Nix のカスタムインストールを初期化します。"
  short: "Nix リポジトリを初期化します。"
  confirm: "インストールを実行する前に、この操作はホームディレクトリに '.nix' フォルダを作成し、そのフォルダを /nix にマウントするためのいくつかの
    SystemD ユニットを設定します。続行するには 'y' を確認してください。"
  unfree: "オープンソースライセンスのない非フリーパッケージ（Visual Studio Code、Spotifyなど）を許可しますか？"
  insecure: "既知の脆弱性を持つソフトウェアを含む『安全でない』パッケージを許可しますか？"
  swcenter: "Nixソフトウェアセンターをインストールしますか？Nix用のグラフィカルなソフトウェアマネージャーです。"
  success: "インストールが完了しました。nixを使用するには再起動してください。"
nixremove:
  use: "remove"
  long: "デフォルトのnixプロファイルにインストールされた最初にマッチするパッケージを削除します。\n\n注意：同じパッケージの複数のインストールが可能です。\n
    \nより正確な操作が必要な場合は、 'nix profile list'および 'nix profile remove'を使用してください。"
  short: "Remove a nix package"
  success: "Package removal complete"
nixinstall:
  use: "install <pkg>"
  long: "Install a package from the `nixpkgs` repository as a flake in the default
    nix profile."
  short: "Install nix package"
  allowUnfree: "Allow packages with unfree licenses"
  allowInsecure: "Allow packages with known vulnerabilities."
  error: "error installing packages"
  runInit: "Have you run the `init` command yet?"
  success: "Successfully installed package."
nixupgrade:
  success: "Successfully upgraded package."
  atleastone: "At least one package name required."
purge:
  use: "purge <packages>"
  long: "マネージされているコンテナの中のパッケージをパージします"
  short: "マネージされているコンテナの中のパッケージをパージします"
remove:
  use: "remove <パッケージ>"
  long: "マネージドコンテナ内のパッケージを削除します"
  short: "マネージドコンテナ内のパッケージを削除します。"
run:
  use: "run <コマンド>"
  long: "マネージドコンテナ内でプログラムを実行します。"
  short: "マネージドコンテナ内でプログラムを実行します。"
  nixMsg: "Do not use `apx run` for nix packages. Run them directly as you would with
    a native package."
search:
  use: "search <packages>"
  long: "Search for packages in a managed container."
  short: "Search for packages in a managed container."
show:
  use: "show <package>"
  long: "Show details about a package"
  short: "Show details about a package"
  isInstalled: "Only return whether the package is installed"
  found: "%s is installed"
  notFound: "%s is not installed"
unexport:
  use: "unexport <package>"
  long: "Unexport/Remove a program's desktop entry from a managed container.\nIf --bin
    flag is provided, remove link to container binary."
  short: "Unexport/Remove a program's desktop entry from a managed container"
  binFlag: "Unexport a previously exported binary."
  success: "Successfully removed exported binary `%s`."
update:
  use: "update"
  long: "Update the list of available packages"
  short: "Update the list of available packages"
  allFlag: "Apply to all containers"
upgrade:
  use: "upgrade"
  long: "Upgrade the system by installing/upgrading available packages."
  short: "Upgrade the system by installing/upgrading available packages."
