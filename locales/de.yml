flags:
  apt: "Installiere Pakete aus der Ubuntu Paketquelle."
  aur: "Installiere Pakete aus dem AUR (Arch User Repository)."
  dnf: "Installiere Pakete aus Fedoras DNF (Dandified YUM) Paketquelle."
  apk: "Installiere Pakete aus der Alpine Paketquelle."
  zypper: "Installiere Pakete aus den OpenSUSE Paketquellen."
  xbps: "Installiere Pakete aus den Void (Linux) Paketquellen."
  nix: "Installiere Pakete aus den Nixpkgs (Nix packages) Paketquellen."
  name: "Auf den benutzerdefinierten Container mit diesem Namen anwenden."
apx:
  use: "apx"
  long: "Apx ist ein Paketmanager mit Unterstützung für mehrere Quellen,\nder es Ihnen\
    \ ermöglicht, Pakete in einem verwalteten Container zu installieren."
  short: "Apx ist ein Paketmanager mit Unterstützung für mehrere Quellen,\nder es\
    \ Ihnen ermöglicht, Pakete in einem verwalteten Container zu installieren."
  verboseFlag: "detailliertere Ausgabe anzeigen"
  allFlag: "Für alle Container anwenden."
  cxl: "Operation abgebrochen auf Benutzeranfrage."
  assumeYes: "Ohne manuelle Bestätigung fortfahren."
  notForNix: "Dieser Befehl gilt nicht für die Nix-Umgebung."
autoremove:
  use: "autoremove"
  long: "Alle unbenutzten Pakete automatisch entfernen"
  short: "Alle unbenutzten Pakete automatisch entfernen"
clean:
  use: "clean"
  long: "Den Zwischenspeicher des Apx Paketmanagers löschen"
  short: "Den Zwischenspeicher des Apx Paketmanagers löschen"
enter:
  use: "enter"
  long: "Enter a shell in the managed container"
  short: "Enter a shell in the managed container"
  failedEnter: "Betreten des verwalteten Containers gescheitert"
  outside: "You are now outside the managed container."
export:
  use: "export <program/binary>"
  long: "Export/Recreate a program's desktop entry from a managed container"
  short: "Export/Recreate a program's desktop entry from a managed container"
  binFlag: "Export binary command"
init:
  use: "init"
  long: "Initialize a managed container"
  short: "Initialize a managed container"
  confirm: "Container already exists. Do you want to re-initialize it? This operation\
    \ will remove everything, including your files in the container."
  remove: "error removing container: %v"
  create: "error creating container: %v"
install:
  use: "apx install <package>"
  long: "Install packages inside a managed container."
  short: "Install packages inside a managed container."
  assumeYes: "Proceed without manual confirmation"
  fixBroken: "Fix broken dependencies before installing"
  noExport: "Do not export a desktop entry after the installation."
  sideload: "Install a package from a local file."
  sideArgs: "sideload requires the path to a local file"
  sideUserTemp: "can't move file to user temp: %s"
  exportBinPrompt: "Export binary %s to host?\nThis will let you call it directly\
    \ from the shell without using \"apx run\".\nYou can also export it later using\
    \ \"apx export --bin %s\""
list:
  use: "list"
  long: "List installed packages."
  short: "List installed packages."
  upgradable: "Show upgradable packages"
  installed: "Show installed packages"
nix:
  use: "nix"
  long: "Manage a custom installation of nix in your $HOME directory.\n\nThe `apx\
    \ nix` integration serves as a wrapper for the\ndefault nix profile. Once installed,\
    \ you are free to use any features of\nnix without using the `apx nix` command."
  short: "Manage nix installation"
nixinit:
  use: "init"
  long: "Initializes a custom installation of nix by creating $HOME/.nix and setting\
    \ up some SystemD units to mount it as /nix."
  short: "Initialize nix repository"
  confirm: "This will create a '.nix' folder in your home directory and set up some\
    \ SystemD units to mount that folder at /nix before running the installation.\
    \ Confirm 'y' to continue."
  unfree: "Would you like to allow 'unfree' packages without Open Source licenses\
    \ (Visual Studio Code, Spotify, etc)?"
  insecure: "Would you like to allow 'insecure' packages (software with known vulnerabilities)?"
  swcenter: "Would you like to install the Nix Software Center - a graphical software\
    \ manager for Nix?"
  success: "Installation complete. Reboot to start using nix."
nixremove:
  use: "remove"
  long: "Remove the first matching package installed in the default nix profile.\n\
    \nNote: It is possible to have multiple installations of the same package.\n\n\
    If you need more precision use 'nix profile list' and 'nix profile remove'."
  short: "Remove a nix package"
  success: "Package removal complete"
nixinstall:
  use: "install <pkg>"
  long: "Install a package from the `nixpkgs` repository as a flake in the default\
    \ nix profile."
  short: "Install nix package"
  allowUnfree: "Allow packages with unfree licenses"
  allowInsecure: "Allow packages with known vulnerabilities."
  error: "error installing packages"
  runInit: "Have you run the `init` command yet?"
  success: "Successfully installed package."
nixupgrade:
  success: "Successfully upgraded package."
  atleastone: "At least one package name required."
purge:
  use: "purge <packages>"
  long: "Purge packages inside a managed container"
  short: "Purge packages inside a managed container"
remove:
  use: "remove <package>"
  long: "Remove packages inside a managed container."
  short: "Remove packages inside a managed container."
run:
  use: "run <command>"
  long: "Run a program inside a managed container."
  short: "Run a program inside a managed container."
  nixMsg: "Do not use `apx run` for nix packages. Run them directly as you would with\
    \ a native package."
search:
  use: "search <packages>"
  long: "Search for packages in a managed container."
  short: "Search for packages in a managed container."
show:
  use: "show <package>"
  long: "Show details about a package"
  short: "Show details about a package"
  isInstalled: "Only return whether the package is instaled"
  found: "%s is installed"
  notFound: "%s is not installed"
unexport:
  use: "unexport <package>"
  long: "Unexport/Remove a program's desktop entry from a managed container.\nIf --bin\
    \ flag is provided, remove link to container binary."
  short: "Unexport/Remove a program's desktop entry from a managed container"
  binFlag: "Unexport a previously exported binary."
  success: "Successfully removed exported binary `%s`."
update:
  use: "update"
  long: "Update the list of available packages"
  short: "Update the list of available packages"
  allFlag: "Apply to all containers"
upgrade:
  use: "upgrade"
  long: "Upgrade the system by installing/upgrading available packages."
  short: "Upgrade the system by installing/upgrading available packages."
