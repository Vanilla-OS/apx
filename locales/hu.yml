flags:
  apt: "Csomagok telepítése az Ubuntu tárolóból."
  aur: "Csomagok telepítése az AUR-ból (Arch User Repository)."
  dnf: "Csomagok telepítése a Fedora DNF (Dandified YUM) tárolóból."
  apk: "Csomagok telepítése az Alpine tárolóból."
  zypper: "Csomagok telepítése az OpenSUSE tárolóból."
  xbps: "Csomagok telepítése a Void (Linux) tárolóból."
  nix: "Csomagok telepítése a Nixpkgs (Nix packages) tárolóból."
  swupd: "Csomagok telepítése a Clear Linux* áruházból"
  name: " Alkalmazza az egyéni tárolóra ezzel a névvel."
apx:
  use: "apx"
  long: "Az Apx egy csomagkezelő, amely támogatja a több forrásból származó csomagokat,\n
    lehetővé teszi a csomagok telepítését egy kezelt tárolóban."
  short: "Az Apx egy csomagkezelő, amely támogatja a több forrásból származó csomagokat,\n
    lehetővé teszi a csomagok telepítését egy kezelt tárolóban."
  verboseFlag: "részletesebb kimenet megjelenítése"
  allFlag: "Alkalmazás az összes tárolóra."
  cxl: "A művelet a felhasználó kérésére megszakításra került."
  assumeYes: "Folytatás kézi jóváhagyás nélkül."
  notForNix: "Ez a parancs nem vonatkozik a nix környezetre."
autoremove:
  use: "autoremove"
  long: "Automatikusan eltávolít minden nem használt csomagot"
  short: "Automatikusan eltávolít minden nem használt csomagot"
clean:
  use: "clean"
  long: "Az apx csomagkezelő gyorsítótárának tisztítása"
  short: "Az apx csomagkezelő gyorsítótárának tisztítása"
enter:
  use: "enter"
  long: "Lépjen be egy héjba a kezelt konténerben"
  short: "Lépjen be egy héjba a kezelt konténerben"
  failedEnter: "nem sikerült belépni a kezelt konténerbe"
  outside: "Ön most már a kezelt konténeren kívül van."
export:
  use: "export <program/bináris>"
  long: "Program asztali bejegyzésének exportálása/újra létrehozása egy felügyelt
    tárolóból"
  short: "Program asztali bejegyzésének exportálása/újra létrehozása egy felügyelt
    tárolóból"
  binFlag: "Bináris parancs exportálása"
init:
  use: "init"
  long: "Kezelt konténer inicializálása"
  short: "Kezelt konténer inicializálása"
  confirm: "A konténer már létezik. Újra szeretné inicializálni? Ez a művelet mindent
    eltávolít, beleértve a konténerben lévő fájlokat is."
  remove: "hiba a konténer eltávolításában: %v"
  create: "hiba a konténer létrehozásában: %v"
install:
  use: "apx install <csomag>"
  long: "Csomagok telepítése egy kezelt konténerbe."
  short: "Csomagok telepítése egy kezelt konténerbe."
  assumeYes: "Folytatás kézi jóváhagyás nélkül"
  fixBroken: "Törött függőségek javítása telepítés előtt"
  noExport: "A telepítés után ne exportáljon asztali bejegyzést."
  sideload: "Csomag telepítése helyi fájlból."
  sideArgs: "a sideload egy helyi fájl elérési útvonalát kéri"
  sideUserTemp: "nem tudja áthelyezni a fájlt a felhasználói ideiglenes fájlba: %s"
  exportBinPrompt: "Exportálás bináris %s a fogadóra?\nEz lehetővé teszi, hogy közvetlenül
    a shell-ből hívd meg az \"apx run\" használata nélkül.\nKésőbb is exportálhatod
    a \"apx export --bin %s\" paranccsal."
list:
  use: "list"
  long: "Telepített csomagok listája."
  short: "Telepített csomagok listája."
  upgradable: "Frissíthető csomagok megjelenítése"
  installed: "Telepített csomagok megjelenítése"
nix:
  use: "nix"
  long: "Manage a custom installation of nix in your $HOME directory.\n\nThe `apx
    nix` integration serves as a wrapper for the\ndefault nix profile. Once installed,
    you are free to use any features of\nnix without using the `apx nix` command."
  short: "Manage nix installation"
nixinit:
  use: "init"
  long: "Initializes a custom installation of nix by creating $HOME/.nix and setting
    up some SystemD units to mount it as /nix."
  short: "Initialize nix repository"
  confirm: "This will create a '.nix' folder in your home directory and set up some
    SystemD units to mount that folder at /nix before running the installation. Confirm
    'y' to continue."
  unfree: "Would you like to allow 'unfree' packages without Open Source licenses
    (Visual Studio Code, Spotify, etc)?"
  insecure: "Would you like to allow 'insecure' packages (software with known vulnerabilities)?"
  swcenter: "Would you like to install the Nix Software Center - a graphical software
    manager for Nix?"
  success: "Installation complete. Reboot to start using nix."
nixremove:
  use: "remove"
  long: "Remove the first matching package installed in the default nix profile.\n
    \nNote: It is possible to have multiple installations of the same package.\n\n
    If you need more precision use 'nix profile list' and 'nix profile remove'."
  short: "Remove a nix package"
  success: "Package removal complete"
nixinstall:
  use: "install <pkg>"
  long: "Install a package from the `nixpkgs` repository as a flake in the default
    nix profile."
  short: "Install nix package"
  allowUnfree: "Allow packages with unfree licenses"
  allowInsecure: "Allow packages with known vulnerabilities."
  error: "error installing packages"
  runInit: "Have you run the `init` command yet?"
  success: "Successfully installed package."
nixupgrade:
  success: "Successfully upgraded package."
  atleastone: "At least one package name required."
purge:
  use: "purge <packages>"
  long: "Purge packages inside a managed container"
  short: "Purge packages inside a managed container"
remove:
  use: "remove <package>"
  long: "Remove packages inside a managed container."
  short: "Remove packages inside a managed container."
run:
  use: "run <command>"
  long: "Run a program inside a managed container."
  short: "Run a program inside a managed container."
  nixMsg: "Do not use `apx run` for nix packages. Run them directly as you would with
    a native package."
search:
  use: "search <packages>"
  long: "Search for packages in a managed container."
  short: "Search for packages in a managed container."
show:
  use: "show <package>"
  long: "Show details about a package"
  short: "Show details about a package"
  isInstalled: "Only return whether the package is installed"
  found: "%s is installed"
  notFound: "%s is not installed"
unexport:
  use: "unexport <package>"
  long: "Unexport/Remove a program's desktop entry from a managed container.\nIf --bin
    flag is provided, remove link to container binary."
  short: "Unexport/Remove a program's desktop entry from a managed container"
  binFlag: "Unexport a previously exported binary."
  success: "Successfully removed exported binary `%s`."
update:
  use: "update"
  long: "Update the list of available packages"
  short: "Update the list of available packages"
  allFlag: "Apply to all containers"
upgrade:
  use: "upgrade"
  long: "Upgrade the system by installing/upgrading available packages."
  short: "Upgrade the system by installing/upgrading available packages."
