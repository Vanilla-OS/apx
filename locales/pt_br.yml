flags:
  apt: "Instalar pacotes a partir do repositório Ubuntu."
  aur: "Instalar pacotes do AUR (Arch User Repository)."
  dnf: "Instalar pacotes do repositório DNF (Dandified YUM) do Fedora."
  apk: "Instalar pacotes a partir do repositório Alpine."
  zypper: "Instalar pacotes a partir do repositório OpenSUSE."
  xbps: "Instalar pacotes a partir do repositório Void (Linux)."
  nix: "Instalar pacotes do repositório Nixpkgs (Nix packages)."
  name: "Aplica a contêineres personalizados com este nome."
apx:
  use: "apx"
  long: "Apx é um gerenciador de pacotes com suporte para múltiplas fontes,\npermitindo a instalação de pacotes em um container controlado."
  short: "Apx é um gerenciador de pacotes com suporte para múltiplas fontes,\npermitindo a instalação de pacotes em um container controlado."
  verboseFlag: "Mostrar resultados mais detalhados."
  allFlag: "Aplicar para todos os containers."
  cxl: "Operação cancelada a pedido do usuário."
  assumeYes: "Proceder sem confirmação manual."
  notForNix: "Este comando não se aplica ao ambiente nix."
autoremove:
  use: "autoremove"
  long: "Remove todos os pacotes não utilizados automaticamente"
  short: "Remove todos os pacotes não utilizados automaticamente"
clean:
  use: "limpar"
  long: "Limpa o cache do gerenciador de pacotes apx"
  short: "Limpa o cache do gerenciador de pacotes apx"
enter:
  use: "entrar"
  long: "Insere um terminal no contêiner gerenciado"
  short: "Insere um terminal no contêiner gerenciado"
  failedEnter: "falha ao entrar no contêiner gerenciado"
  outside: "Você está agora fora do contêiner gerenciado."
export:
  use: "export <program/binary>"
  long: "Export/Recreate a program's desktop entry from a managed container"
  short: "Export/Recreate a program's desktop entry from a managed container"
  binFlag: "Export binary command"
init:
  use: "init"
  long: "Initialize a managed container"
  short: "Initialize a managed container"
  confirm: "Container already exists. Do you want to re-initialize it? This operation will remove everything, including your files in the container."
  remove: "error removing container: %v"
  create: "error creating container: %v"
install:
  use: "apx install <package>"
  long: "Install packages inside a managed container."
  short: "Install packages inside a managed container."
  assumeYes: "Proceed without manual confirmation"
  fixBroken: "Fix broken dependencies before installing"
  noExport: "Do not export a desktop entry after the installation."
  sideload: "Install a package from a local file."
  sideArgs: "sideload requires the path to a local file"
  sideUserTemp: "can't move file to user temp: %s"
list:
  use: "list"
  long: "List installed packages."
  short: "List installed packages."
  upgradable: "Show upgradable packages"
  installed: "Show installed packages"
nix:
  use: "nix"
  long: "Manage a custom installation of nix in your $HOME directory.\n\nThe `apx nix` integration serves as a wrapper for the\ndefault nix profile. Once installed, you are free to use any features of\nnix without using the `apx nix` command."
  short: "Manage nix installation"
nixinit:
  use: "init"
  long: "Initializes a custom installation of nix by creating $HOME/.nix and setting up some SystemD units to mount it as /nix."
  short: "Initialize nix repository"
  confirm: "This will create a '.nix' folder in your home directory and set up some SystemD units to mount that folder at /nix before running the installation. Confirm 'y' to continue."
  success: "Installation complete. Reboot to start using nix."
nixremove:
  use: "remove"
  long: "Remove the first matching package installed in the default nix profile.\n\nNote: It is possible to have multiple installations of the same package.\n\nIf you need more precision use 'nix profile list' and 'nix profile remove'."
  short: "Remove a nix package"
  success: "Package removal complete"
nixinstall:
  use: "install <pkg>"
  long: "Install a package from the `nixpkgs` repository as a flake in the default nix profile."
  short: "Install nix package"
  allowUnfree: "Allow packages with unfree licenses"
  error: "error installing packages"
  runInit: "Have you run the `init` command yet?"
  success: "Successfully installed package."
nixupgrade:
  success: "Successfully upgraded package."
  atleastone: "At least one package name required."
purge:
  use: "purge <packages>"
  long: "Purge packages inside a managed container"
  short: "Purge packages inside a managed container"
remove: 
  use: "remove <package>"
  long: "Remove packages inside a managed container."
  short: "Remove packages inside a managed container."
run:
  use: "run <command>"
  long: "Run a program inside a managed container."
  short: "Run a program inside a managed container."
search:
  use: "search <packages>"
  long: "Search for packages in a managed container."
  short: "Search for packages in a managed container."
show:
  use: "show <package>"
  long: "Show details about a package"
  short: "Show details about a package"
  isInstalled: "Only return whether the package is instaled"
  found: "%s is installed"
  notFound: "%s is not installed"
unexport:
  use: "unexport <package>"
  long: "Unexport/Remove a program's desktop entry from a managed container.\nIf --bin flag is provided, remove link to container binary."
  short: "Unexport/Remove a program's desktop entry from a managed container"
  binFlag: "Unexport a previously exported binary."
  success: "Successfully removed exported binary `%s`."
update:
  use: "update"
  long: "Update the list of available packages"
  short: "Update the list of available packages"
  allFlag: "Apply to all containers"
upgrade:
  use: "upgrade"
  long: "Upgrade the system by installing/upgrading available packages."
  short: "Upgrade the system by installing/upgrading available packages."
