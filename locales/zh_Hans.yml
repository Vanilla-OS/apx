flags:
  apt: "从 Ubuntu 软件仓库安装软件包。"
  aur: "从 AUR（Arch 用户仓库）安装软件包。"
  dnf: "从 Fedora 的 DNF（Dandified YUM）软件仓库中安装软件包。"
  apk: "从 Alpine 软件仓库安装软件包。"
  zypper: "从 OpenSUSE 软件仓库安装软件包。"
  xbps: "从 Void (Linux) 软件仓库安装软件包。"
  nix: "从 Nixpkgs（Nix 软件包）仓库安装软件包。"
  name: "将此名称应用于自定义容器。"
apx:
  use: "apx"
  long: "Apx 是支持多软件源的软件包管理器。\n允许用户在受管理的容器中安装软件包。"
  short: "Apx 是支持多软件源的软件包管理器。\n允许用户在受管理的容器中安装软件包。"
  verboseFlag: "显示更详细的输出"
  allFlag: "为所有容器应用。"
  cxl: "应用户要求取消操作。"
  assumeYes: "在无须手动确认的情况下继续。"
  notForNix: "此命令无法应用于 nix 环境。"
autoremove:
  use: "autoremove"
  long: "自动移除所有未使用的软件包"
  short: "自动移除所有未使用的软件包"
clean:
  use: "clean"
  long: "清除 apx 软件包管理器的缓存"
  short: "清除 apx 软件包管理器的缓存"
enter:
  use: "enter"
  long: "进入受管理的容器的 shell"
  short: "进入受管理的容器的 shell"
  failedEnter: "无法进入受管理的容器"
  outside: "您现在位于受管理的容器之外。"
export:
  use: "export <程序/二进制文件>"
  long: "从受管理的容器中导出/重新创建程序的桌面条目"
  short: "从受管理的容器中导出/重新创建程序的桌面条目"
  binFlag: "导出二进制命令"
init:
  use: "init"
  long: "初始化受管理的容器"
  short: "初始化受管理的容器"
  confirm: "容器已经存在。您想重新初始化该容器吗？此操作将移除该容器的所有内容，包括您在容器中的文件。"
  remove: "移除容器时出现错误：%v"
  create: "创建容器时发生错误：%v"
install:
  use: "apx install <软件包>"
  long: "在受管理的容器内安装软件包。"
  short: "在受管理的容器内安装软件包。"
  assumeYes: "在无须手动确认的情况下继续"
  fixBroken: "在安装前修复破损的依赖关系"
  noExport: "安装后不要导出桌面条目。"
  sideload: "从本地文件安装软件包。"
  sideArgs: "旁加载/侧载（sideload）需要本地文件的路径"
  sideUserTemp: "无法将文件移动至用户临时文件夹：%s"
  exportBinPrompt: "将二进制文件 %s 导出至宿主机吗？\n这将允许您直接从 shell 调用它而无须使用“apx run”。\n您也可以稍后使用“apx\
    \ export --bin %s”导出"
list:
  use: "list"
  long: "列出已安装的软件包。"
  short: "列出已安装的软件包。"
  upgradable: "显示可升级的软件包"
  installed: "显示已安装的软件包"
nix:
  use: "nix"
  long: "在您的 $HOME 目录下管理一个自定义的 nix 安装。\n\n`apx nix` 集成是对默认 nix 配置文件的一个封装。\n安装完成后，你就可以自由地使用\
    \ nix 的任何功能，\n而不必使用 `apx nix` 命令。"
  short: "管理 nix 安装"
nixinit:
  use: "init"
  long: "通过创建 $HOME/.nix 并设置一些用于将其挂载为 /nix 的 SystemD 单元来初始化 nix 的自定义安装。"
  short: "初始化 nix 软件仓库"
  confirm: "这将在家目录中创建一个“.nix”文件夹，并设置一些 SystemD 单元以在运行安装之前将该文件夹挂载到 /nix 处。输入“y”继续。"
  unfree: "您想允许“unfree”，即不使用开源许可证的软件包（例如 Visual Studio Code、Spotify 等）吗？"
  insecure: "您想允许“insecure”软件包（有已知安全漏洞的软件）吗？"
  swcenter: "您想安装 Nix 软件中心——适用于 Nix 的图形化软件管理程序吗？"
  success: "安装完成。重新启动以开始使用 nix。"
nixremove:
  use: "remove"
  long: "移除默认 nix 配置文件中安装的第一个匹配的软件包。\n\n注意：同一个软件包有可能有多个安装。\n\n如果需要更精确，请使用“nix profile\
    \ list”和“nix profile remove”。"
  short: "移除 nix 软件包"
  success: "软件包移除完成"
nixinstall:
  use: "install <pkg>"
  long: "在默认 nix 配置文件中从 `nixpkgs` 仓库安装软件包作为 flake。"
  short: "安装 nix 软件包"
  allowUnfree: "允许使用非自由许可证的软件包"
  allowInsecure: "允许具有已知漏洞的软件包。"
  error: "安装软件包时出现错误"
  runInit: "您是否运行过 `init` 命令？"
  success: "已成功安装软件包。"
nixupgrade:
  success: "已成功升级软件包。"
  atleastone: "至少需要一个软件包名称。"
purge:
  use: "purge <软件包>"
  long: "清除（purge）受管理的容器内的软件包"
  short: "清除（purge）受管理的容器内的软件包"
remove:
  use: "remove <软件包>"
  long: "移除受管理的容器内的软件包。"
  short: "移除受管理的容器内的软件包。"
run:
  use: "run <命令>"
  long: "在受管理的容器内运行程序。"
  short: "在受管理的容器内运行程序。"
  nixMsg: "不要对 nix 包使用 `apx run`。像原生软件包一样直接运行它们。"
search:
  use: "search <软件包>"
  long: "在受管理的容器内搜索软件包。"
  short: "在受管理的容器内搜索软件包。"
show:
  use: "show <软件包>"
  long: "显示软件包的详细信息"
  short: "显示软件包的详细信息"
  isInstalled: "仅返回软件包是否已安装"
  found: "%s 已安装"
  notFound: "%s 未安装"
unexport:
  use: "unexport <软件包>"
  long: "移除从受管理的容器中导出的程序的桌面条目。\n若提供 --bin 标记，同时移除到容器二进制文件的链接。"
  short: "移除从受管理的容器中导出的程序的桌面条目"
  binFlag: "移除先前导出的二进制文件。"
  success: "已成功移除导出的二进制文件`%s`。"
update:
  use: "update"
  long: "更新可用软件包的列表"
  short: "更新可用软件包的列表"
  allFlag: "应用至所有容器"
upgrade:
  use: "upgrade"
  long: "通过安装/升级可用的软件包来升级系统。"
  short: "通过安装/升级可用的软件包来升级系统。"
