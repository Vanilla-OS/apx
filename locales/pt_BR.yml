flags:
  apt: "Instalar pacotes do repositório Ubuntu."
  aur: "Instalar pacotes do AUR (Arch User Repository)."
  dnf: "Instalar pacotes do repositório DNF (Dandified YUM) do Fedora."
  apk: "Instalar pacotes do repositório Alpine (Linux)."
  zypper: "Instalar pacotes do repositório OpenSUSE."
  xbps: "Instalar pacotes do repositório Void (Linux)."
  nix: "Instalar pacotes do repositório Nixpkgs (pacotes Nix)."
  name: "Aplicar ao contêiner personalizado com esse nome."
apx:
  use: "apx"
  long: "Apx é um gerenciador de pacotes com suporte para múltiplas fontes,\npermitindo\
    \ a instalação de pacotes em um container gerenciado."
  short: "Apx é um gerenciador de pacotes com suporte para múltiplas fontes,\npermitindo\
    \ a instalação de pacotes em um container gerenciado."
  verboseFlag: "mostrar saída mais detalhada"
  allFlag: "Aplicar a todos os containers."
  cxl: "Operação cancelada a pedido do usuário."
  assumeYes: "Proceder sem confirmação manual."
  notForNix: "Este comando não se aplica ao ambiente nix."
autoremove:
  use: "autoremove"
  long: "Remover todos os pacotes não utilizados automaticamente"
  short: "Remover todos os pacotes não utilizados automaticamente"
clean:
  use: "clean"
  long: "Limpar o cache do gerenciador de pacotes apx"
  short: "Limpar o cache do gerenciador de pacotes apx"
enter:
  use: "enter"
  long: "Entrar um shell no contêiner administrado"
  short: "Entrar um shell no contêiner administrado"
  failedEnter: "falha ao entrar no contêiner administrado"
  outside: "Agora você está fora do contêiner administrado."
export:
  use: "export <programa/binário>"
  long: "Exportar/Recriar a entrada desktop de um programa a partir de um contêiner\
    \ gerenciado"
  short: "Exportar/Recriar a entrada desktop de um programa a partir de um contêiner\
    \ gerenciado"
  binFlag: "Exportar comando binário"
init:
  use: "init"
  long: "Inicializar um contêiner administrado"
  short: "Inicializar um contêiner administrado"
  confirm: "O contêiner já existe. Você quer reinicializá-lo? Esta operação removerá\
    \ tudo, inclusive seus arquivos no contêiner."
  remove: "erro ao remover o contêiner: %v"
  create: "erro ao criar o contêiner: %v"
install:
  use: "apx install <pacote>"
  long: "Instalar pacotes dentro de um contêiner administrado."
  short: "Instalar pacotes dentro de um contêiner administrado."
  assumeYes: "Proceder sem confirmação manual"
  fixBroken: "Consertar dependências quebradas antes da instalação"
  noExport: "Não exportar uma entrada desktop após a instalação."
  sideload: "Instale um pacote a partir de um arquivo local."
  sideArgs: "carregamento lateral (sideload) requer o caminho para um arquivo local"
  sideUserTemp: "não é possível mover o arquivo para a pasta temporária (temp) do\
    \ usuário: %s"
  exportBinPrompt: "Exportar o binário %s para o hospedeiro?\nIsto permitirá que você\
    \ o chame diretamente do shell sem usar \"apx run\".\nVocê também pode exportá-lo\
    \ posteriormente usando \"apx export --bin %s\""
list:
  use: "list"
  long: "Listar os pacotes instalados."
  short: "Listar os pacotes instalados."
  upgradable: "Mostrar pacotes atualizáveis"
  installed: "Mostrar pacotes instalados"
nix:
  use: "nix"
  long: "Gerencie uma instalação personalizada de nix em seu diretório $HOME.\n\n\
    A integração `apx nix` serve como um invólucro para o\nperfil nix padrão. Uma\
    \ vez instalado, você está livre para usar quaisquer características de\nnix sem\
    \ utilizar o comando `apx nix`."
  short: "Manage nix installation"
nixinit:
  use: "init"
  long: "Initializes a custom installation of nix by creating $HOME/.nix and setting\
    \ up some SystemD units to mount it as /nix."
  short: "Initialize nix repository"
  confirm: "This will create a '.nix' folder in your home directory and set up some\
    \ SystemD units to mount that folder at /nix before running the installation.\
    \ Confirm 'y' to continue."
  unfree: "Would you like to allow 'unfree' packages without Open Source licenses\
    \ (Visual Studio Code, Spotify, etc)?"
  insecure: "Would you like to allow 'insecure' packages (software with known vulnerabilities)?"
  swcenter: "Would you like to install the Nix Software Center - a graphical software\
    \ manager for Nix?"
  success: "Installation complete. Reboot to start using nix."
nixremove:
  use: "remove"
  long: "Remove the first matching package installed in the default nix profile.\n\
    \nNote: It is possible to have multiple installations of the same package.\n\n\
    If you need more precision use 'nix profile list' and 'nix profile remove'."
  short: "Remove a nix package"
  success: "Package removal complete"
nixinstall:
  use: "install <pkg>"
  long: "Install a package from the `nixpkgs` repository as a flake in the default\
    \ nix profile."
  short: "Instalar pacote nix"
  allowUnfree: "Permitir pacotes com licenças não livres"
  allowInsecure: "Permitir pacotes com vulnerabilidades conhecidas"
  error: "error installing packages"
  runInit: "Have you run the `init` command yet?"
  success: "Pacote instalado com sucesso."
nixupgrade:
  success: "Pacote atualizado com sucesso."
  atleastone: "At least one package name required."
purge:
  use: "purge <packages>"
  long: "Purge packages inside a managed container"
  short: "Purge packages inside a managed container"
remove:
  use: "remove <package>"
  long: "Remove packages inside a managed container."
  short: "Remove packages inside a managed container."
run:
  use: "run <command>"
  long: "Run a program inside a managed container."
  short: "Run a program inside a managed container."
  nixMsg: "Do not use `apx run` for nix packages. Run them directly as you would with\
    \ a native package."
search:
  use: "search <packages>"
  long: "Search for packages in a managed container."
  short: "Search for packages in a managed container."
show:
  use: "show <package>"
  long: "Show details about a package"
  short: "Show details about a package"
  isInstalled: "Only return whether the package is installed"
  found: "%s is installed"
  notFound: "%s is not installed"
unexport:
  use: "unexport <package>"
  long: "Unexport/Remove a program's desktop entry from a managed container.\nIf --bin\
    \ flag is provided, remove link to container binary."
  short: "Unexport/Remove a program's desktop entry from a managed container"
  binFlag: "Unexport a previously exported binary."
  success: "Successfully removed exported binary `%s`."
update:
  use: "update"
  long: "Update the list of available packages"
  short: "Update the list of available packages"
  allFlag: "Apply to all containers"
upgrade:
  use: "upgrade"
  long: "Upgrade the system by installing/upgrading available packages."
  short: "Upgrade the system by installing/upgrading available packages."
