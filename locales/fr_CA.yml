flags:
  apt: "Installer les paquets à partir du dépôt Ubuntu."
  aur: "Installer les paquets à partir de l’AUR (Dépôt Utilisateur Arch)."
  dnf: "Installer les paquets à partir du dépôt DNF (Dandified YUM) de Fedora."
  apk: "Installer les paquets à partir du dépôt Alpine."
  zypper: "Installer les paquets à partir du dépôt OpenSUSE."
  xbps: "Installer les paquets à partir du dépôt Void (Linux)."
  nix: "Installer les paquets à partir du dépôt Nixpkgs (Nix)."
  swupd: "Installer les paquets à partir du magasin Clear Linux*"
  name: " Appliquer au conteneur personnalisé portant ce nom."
apx:
  use: "apx"
  long: "Apx est un gestionnaire de paquets avec support pour plusieurs sources,\n
    vous permettant d’installer des paquets dans un conteneur géré."
  short: "Apx est un gestionnaire de paquets avec support pour plusieurs sources,\n
    vous permettant d’installer des paquets dans un conteneur géré."
  verboseFlag: "Afficher une sortie de commande plus détaillée"
  allFlag: "Appliquer à tous les conteneurs."
  cxl: "Opération annulée à la demande de l'utilisateur."
  assumeYes: "Continuer sans confirmation manuelle."
  notForNix: "Cette commande ne s'applique pas à l'environnement nix."
autoremove:
  use: "autoremove"
  long: "Supprimer automatiquement tous les paquets inutilisés"
  short: "Supprimer automatiquement tous les paquets inutilisés"
clean:
  use: "clean"
  long: "Nettoyer le cache du gestionnaire de paquets apx"
  short: "Nettoyer le cache du gestionnaire de paquets apx"
enter:
  use: "enter"
  long: "Accéder à une invite de commande dans le conteneur géré"
  short: "Accéder à une invite de commande dans le conteneur géré"
  failedEnter: "échec d'accès au conteneur géré"
  outside: "Vous êtes maintenant en dehors du conteneur géré."
export:
  use: "export <programme/binaire>"
  long: "Exporter/recréer l'entrée de bureau d'un programme à partir d'un conteneur
    géré"
  short: "Exporter/recréer l'entrée de bureau d'un programme à partir d'un conteneur
    géré"
  binFlag: "Exporter la commande binaire"
init:
  use: "init"
  long: "Initialiser un conteneur géré"
  short: "Initialiser un conteneur géré"
  confirm: "Le conteneur existe déjà. Voulez-vous le réinitialiser ? Cette opération
    supprimera tout, y compris vos fichiers dans le conteneur."
  remove: "erreur lors de la suppression du conteneur: %v"
  create: "erreur lors de la création du conteneur: %v"
install:
  use: "apx install <paquet>"
  long: "Installer des paquets à l'intérieur d'un conteneur géré."
  short: "Installer des paquets à l'intérieur d'un conteneur géré."
  assumeYes: "Procéder sans confirmation manuelle"
  fixBroken: "Réparer les dépendances brisées avant l'installation"
  noExport: "Ne pas exporter une entrée de bureau après l'installation."
  sideload: "Installer un paquet à partir d'un fichier local."
  sideArgs: "le chargement indépendant (sideload) nécessite le chemin d'accès à un
    fichier local"
  sideUserTemp: "impossible de déplacer le fichier vers le répertoire temporaire de
    l'utilisateur: %s"
  exportBinPrompt: "Exporter le binaire %s vers l'hôte?\nCela vous permettra de l'appeler
    directement depuis l'invite de commande sans utiliser \"apx run\".\nVous pouvez
    aussi l'exporter ultérieurement en utilisant \"apx export --bin %s\""
list:
  use: "list"
  long: "Afficher les paquets installés."
  short: "Afficher les paquets installés."
  upgradable: "Afficher les paquets pouvant être mis à jour"
  installed: "Afficher les paquets installés"
nix:
  use: "nix"
  long: "Gérez une installation personnalisée de Nix dans votre répertoire $HOME.\n\
    \nL'intégration `apx nix` sert d'enveloppe pour le\nprofil Nix par défaut. Une
    fois installé, vous êtes libre d'utiliser toutes les\nfonctionnalités de Nix sans
    utiliser la commande `apx nix`."
  short: "Gérer l'installation de Nix"
nixinit:
  use: "init"
  long: "Initialise une installation personnalisée de Nix en créant $HOME/.nix et
    en configurant certaines unités SystemD pour monter le répertoire en tant que
    /nix."
  short: "Initialiser le dépôt Nix"
  confirm: "Cette action va créer un dossier '.nix' dans votre répertoire personnel
    et configurer certaines unités SystemD pour monter ce dossier à /nix avant d'exécuter
    l'installation. Confirmez avec 'y' pour continuer."
  unfree: "Souhaitez-vous autoriser les paquets \"non-free\" sans licence Open Source
    (Visual Studio Code, Spotify, etc.)?"
  insecure: "Souhaitez-vous autoriser les paquets \"insecure\" (logiciels présentant
    des vulnérabilités connues)?"
  swcenter: "Souhaitez-vous installer le Centre de logiciel Nix - un gestionnaire
    de logiciels graphique pour Nix?"
  success: "Installation terminée. Redémarrez pour commencer à utiliser Nix."
nixremove:
  use: "remove"
  long: "Supprimer le premier paquet correspondant installé dans le profil Nix par
    défaut.\n\nNote : Il est possible d'avoir plusieurs installations du même paquet.\n
    \nSi vous avez besoin de plus de précision, utilisez 'nix profile list' et 'nix
    profile remove'."
  short: "Supprimer un paquet Nix"
  success: "Suppression du paquet terminée"
nixinstall:
  use: "install <pkg>"
  long: "Installer un paquet à partir du dépôt `nixpkgs` en tant que flake dans le
    profil Nix par défaut."
  short: "Installer un paquet Nix"
  allowUnfree: "Autoriser les paquets avec des licences non libres"
  allowInsecure: "Autoriser les paquets avec des vulnérabilités connues."
  error: "erreur lors de l'installation des paquets"
  runInit: "Avez-vous déjà exécuté la commande `init`?"
  success: "Paquet installé avec succès."
nixupgrade:
  success: "Mise à jour du paquet effectuée avec succès."
  atleastone: "Au moins un nom de paquet est requis."
purge:
  use: "purge <paquets>"
  long: "Supprimer complètement les paquets à l'intérieur d'un conteneur géré"
  short: "Supprimer complètement les paquets à l'intérieur d'un conteneur géré"
remove:
  use: "remove <paquet>"
  long: "Supprimer les paquets à l'intérieur d'un conteneur géré."
  short: "Supprimer les paquets à l'intérieur d'un conteneur géré."
run:
  use: "run <commande>"
  long: "Exécuter un programme à l'intérieur d'un conteneur géré."
  short: "Exécuter un programme à l'intérieur d'un conteneur géré."
  nixMsg: "N'utilisez pas `apx run` pour les paquets Nix. Exécutez-les directement
    comme vous le feriez avec un paquet natif."
search:
  use: "search <paquets>"
  long: "Rechercher des paquets dans un conteneur géré."
  short: "Rechercher des paquets dans un conteneur géré."
show:
  use: "show <paquet>"
  long: "Afficher les détails d'un paquet"
  short: "Afficher les détails d'un paquet"
  isInstalled: "Afficher uniquement si le paquet est installé"
  found: "%s est installé"
  notFound: "%s n'est pas installé"
unexport:
  use: "unexport <paquet>"
  long: "Supprimer l'entrée de bureau d'un programme d'un conteneur géré.\nSi l'argument
    --bin est fourni, supprimer le lien vers le binaire du conteneur."
  short: "Supprimer l'entrée de bureau d'un programme d'un conteneur géré"
  binFlag: "Annuler l'exportation d'un binaire précédemment exporté."
  success: "Suppression réussie du binaire exporté `%s`."
update:
  use: "update"
  long: "Mettre à jour la liste des paquets disponibles"
  short: "Mettre à jour la liste des paquets disponibles"
  allFlag: "Appliquer à tous les conteneurs"
upgrade:
  use: "upgrade"
  long: "Mettre à niveau le système en installant/mettant à niveau les paquets disponibles."
  short: "Mettre à niveau le système en installant/mettant à niveau les paquets disponibles."
